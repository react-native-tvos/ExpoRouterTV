diff --git a/node_modules/react-native/Libraries/Pressability/Pressability.js b/node_modules/react-native/Libraries/Pressability/Pressability.js
index e70c410..a2b2758 100644
--- a/node_modules/react-native/Libraries/Pressability/Pressability.js
+++ b/node_modules/react-native/Libraries/Pressability/Pressability.js
@@ -440,7 +440,7 @@ export default class Pressability {
   _createEventHandlers(): EventHandlers {
     const tvPressEventHandlers = {
       onPressIn: (evt: any): void => {
-        if (this._config.disabled === false) {
+        if (this._config.disabled === true) {
           return;
         }
 
@@ -461,7 +461,7 @@ export default class Pressability {
         }, delayLongPress + delayPressIn);
       },
       onPressOut: (evt: any): void => {
-        if (this._config.disabled === false) {
+        if (this._config.disabled === true) {
           return;
         }
         this._cancelLongPressDelayTimeout();
@@ -484,12 +484,18 @@ export default class Pressability {
 
     const focusEventHandlers = {
       onBlur: (event: BlurEvent): void => {
+        if (this._config.disabled === true) {
+          return;
+        }
         const {onBlur} = this._config;
         if (onBlur != null) {
           onBlur(event);
         }
       },
       onFocus: (event: FocusEvent): void => {
+        if (this._config.disabled === true) {
+          return;
+        }
         const {onFocus} = this._config;
         if (onFocus != null) {
           onFocus(event);
diff --git a/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.h b/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.h
new file mode 100644
index 0000000..d7645cb
--- /dev/null
+++ b/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.h
@@ -0,0 +1,59 @@
+
+/*
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by GenerateRCTThirdPartyFabricComponentsProviderH
+ */
+
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wreturn-type-c-linkage"
+
+#import <React/RCTComponentViewProtocol.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+Class<RCTComponentViewProtocol> RCTThirdPartyFabricComponentsProvider(const char *name);
+#if RCT_NEW_ARCH_ENABLED
+#ifndef RCT_DYNAMIC_FRAMEWORKS
+
+#if !TARGET_OS_OSX
+Class<RCTComponentViewProtocol> RNCTabViewCls(void) __attribute__((used)); // 0
+#endif
+
+Class<RCTComponentViewProtocol> RNGestureHandlerButtonCls(void) __attribute__((used)); // 1
+Class<RCTComponentViewProtocol> RNGestureHandlerRootViewCls(void) __attribute__((used)); // 1
+
+#if !TARGET_OS_OSX
+Class<RCTComponentViewProtocol> RNCSafeAreaProviderCls(void) __attribute__((used)); // 3
+Class<RCTComponentViewProtocol> RNCSafeAreaViewCls(void) __attribute__((used)); // 3
+#endif
+
+#if !TARGET_OS_OSX
+Class<RCTComponentViewProtocol> RNSFullWindowOverlayCls(void) __attribute__((used)); // 4
+Class<RCTComponentViewProtocol> RNSModalScreenCls(void) __attribute__((used)); // 4
+Class<RCTComponentViewProtocol> RNSScreenContainerCls(void) __attribute__((used)); // 4
+Class<RCTComponentViewProtocol> RNSScreenContentWrapperCls(void) __attribute__((used)); // 4
+Class<RCTComponentViewProtocol> RNSScreenFooterCls(void) __attribute__((used)); // 4
+Class<RCTComponentViewProtocol> RNSScreenCls(void) __attribute__((used)); // 4
+Class<RCTComponentViewProtocol> RNSScreenNavigationContainerCls(void) __attribute__((used)); // 4
+Class<RCTComponentViewProtocol> RNSScreenStackHeaderConfigCls(void) __attribute__((used)); // 4
+Class<RCTComponentViewProtocol> RNSScreenStackHeaderSubviewCls(void) __attribute__((used)); // 4
+Class<RCTComponentViewProtocol> RNSScreenStackCls(void) __attribute__((used)); // 4
+Class<RCTComponentViewProtocol> RNSSearchBarCls(void) __attribute__((used)); // 4
+#endif
+
+
+#endif
+#endif
+
+#ifdef __cplusplus
+}
+#endif
+
+#pragma GCC diagnostic pop
+
diff --git a/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.mm b/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.mm
new file mode 100644
index 0000000..c40d9d6
--- /dev/null
+++ b/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.mm
@@ -0,0 +1,74 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by GenerateRCTThirdPartyFabricComponentsProviderCpp
+ */
+
+// OSS-compatibility layer
+
+#import "RCTThirdPartyFabricComponentsProvider.h"
+
+#import <string>
+#import <unordered_map>
+
+Class<RCTComponentViewProtocol> RCTThirdPartyFabricComponentsProvider(const char *name) {
+  static std::unordered_map<std::string, Class (*)(void)> sFabricComponentsClassMap = {
+    #if RCT_NEW_ARCH_ENABLED
+    #ifndef RCT_DYNAMIC_FRAMEWORKS
+#if !TARGET_OS_OSX
+
+    {"RNCTabView", RNCTabViewCls}, // 0
+#endif
+
+
+    {"RNGestureHandlerButton", RNGestureHandlerButtonCls}, // 1
+
+    {"RNGestureHandlerRootView", RNGestureHandlerRootViewCls}, // 1
+
+#if !TARGET_OS_OSX
+
+    {"RNCSafeAreaProvider", RNCSafeAreaProviderCls}, // 3
+
+    {"RNCSafeAreaView", RNCSafeAreaViewCls}, // 3
+#endif
+
+#if !TARGET_OS_OSX
+
+    {"RNSFullWindowOverlay", RNSFullWindowOverlayCls}, // 4
+
+    {"RNSModalScreen", RNSModalScreenCls}, // 4
+
+    {"RNSScreenContainer", RNSScreenContainerCls}, // 4
+
+    {"RNSScreenContentWrapper", RNSScreenContentWrapperCls}, // 4
+
+    {"RNSScreenFooter", RNSScreenFooterCls}, // 4
+
+    {"RNSScreen", RNSScreenCls}, // 4
+
+    {"RNSScreenNavigationContainer", RNSScreenNavigationContainerCls}, // 4
+
+    {"RNSScreenStackHeaderConfig", RNSScreenStackHeaderConfigCls}, // 4
+
+    {"RNSScreenStackHeaderSubview", RNSScreenStackHeaderSubviewCls}, // 4
+
+    {"RNSScreenStack", RNSScreenStackCls}, // 4
+
+    {"RNSSearchBar", RNSSearchBarCls}, // 4
+#endif
+
+    #endif
+    #endif
+  };
+
+  auto p = sFabricComponentsClassMap.find(name);
+  if (p != sFabricComponentsClassMap.end()) {
+    auto classFunc = p->second;
+    return classFunc();
+  }
+  return nil;
+}
