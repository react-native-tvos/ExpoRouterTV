diff --git a/node_modules/react-native/Libraries/Pressability/Pressability.js b/node_modules/react-native/Libraries/Pressability/Pressability.js
index e70c410..a2b2758 100644
--- a/node_modules/react-native/Libraries/Pressability/Pressability.js
+++ b/node_modules/react-native/Libraries/Pressability/Pressability.js
@@ -440,7 +440,7 @@ export default class Pressability {
   _createEventHandlers(): EventHandlers {
     const tvPressEventHandlers = {
       onPressIn: (evt: any): void => {
-        if (this._config.disabled === false) {
+        if (this._config.disabled === true) {
           return;
         }
 
@@ -461,7 +461,7 @@ export default class Pressability {
         }, delayLongPress + delayPressIn);
       },
       onPressOut: (evt: any): void => {
-        if (this._config.disabled === false) {
+        if (this._config.disabled === true) {
           return;
         }
         this._cancelLongPressDelayTimeout();
@@ -484,12 +484,18 @@ export default class Pressability {
 
     const focusEventHandlers = {
       onBlur: (event: BlurEvent): void => {
+        if (this._config.disabled === true) {
+          return;
+        }
         const {onBlur} = this._config;
         if (onBlur != null) {
           onBlur(event);
         }
       },
       onFocus: (event: FocusEvent): void => {
+        if (this._config.disabled === true) {
+          return;
+        }
         const {onFocus} = this._config;
         if (onFocus != null) {
           onFocus(event);
diff --git a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/view/ReactViewManager.java b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/view/ReactViewManager.java
index ad5f355..c0f0883 100644
--- a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/view/ReactViewManager.java
+++ b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/view/ReactViewManager.java
@@ -98,15 +98,8 @@ public class ReactViewManager extends ReactClippingViewManager<ReactViewGroup> {
 
   @ReactProp(name = "accessible")
   public void setAccessible(ReactViewGroup view, boolean accessible) {
-    view.setFocusable(accessible);
-    // This is required to handle Android TV/ Fire TV Devices that are Touch Enabled as well as LeanBack
-    // https://developer.android.com/reference/android/view/View#requestFocus(int,%20android.graphics.Rect)
-    // ** A view will not actually take focus if it is not focusable (isFocusable() returns false), **
-    // ** or if it is focusable and it is not focusable in touch mode (isFocusableInTouchMode()) **
-    // ** while the device is in touch mode.  **
-    if (hasTouchScreen(view.getContext())) {
-      view.setFocusableInTouchMode(accessible);
-    }
+    // Delegate to the focusable setter
+    setFocusable(view, accessible);
   }
 
   @ReactProp(name = "hasTVPreferredFocus")
@@ -358,11 +351,21 @@ public class ReactViewManager extends ReactClippingViewManager<ReactViewGroup> {
       // Clickable elements are focusable. On API 26, this is taken care by setClickable.
       // Explicitly calling setFocusable here for backward compatibility.
       view.setFocusable(true /*isFocusable*/);
+      // This is required to handle Android TV/ Fire TV Devices that are Touch Enabled as well as LeanBack
+      // https://developer.android.com/reference/android/view/View#requestFocus(int,%20android.graphics.Rect)
+      // ** A view will not actually take focus if it is not focusable (isFocusable() returns false), **
+      // ** or if it is focusable and it is not focusable in touch mode (isFocusableInTouchMode()) **
+      // ** while the device is in touch mode.  **
+      if (hasTouchScreen(view.getContext())) {
+        view.setFocusableInTouchMode(true);
+      }
     } else {
       view.setOnClickListener(null);
       view.setClickable(false);
-      // Don't set view.setFocusable(false) because we might still want it to be focusable for
-      // accessibility reasons
+      view.setFocusable(false);
+      if (hasTouchScreen(view.getContext())) {
+        view.setFocusableInTouchMode(false);
+      }
     }
   }
 
